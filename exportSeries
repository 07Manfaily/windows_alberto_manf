import React, { useState, useEffect, useRef } from "react";
import { FilterMatchMode, FilterOperator } from "primereact/api";
import { DataTable } from "primereact/datatable";
import { Column } from "primereact/column";
import { InputText } from "primereact/inputtext";
import { IconField } from "primereact/iconfield";
import { InputIcon } from "primereact/inputicon";
import { Button } from "primereact/button";
import { Tooltip } from "primereact/tooltip";
import { classNames } from "primereact/utils";

export default function HotForm() {
  const fileInputRef = useRef(null);
  const [userResponse, setUserResponse] = useState([]);
  const [globalFilterValue, setGlobalFilterValue] = useState('');
  const [fileLoad, setFileLoad] = useState(false);
  const [filters, setFilters] = useState({
    global: { value: null, matchMode: FilterMatchMode.CONTAINS },
  });

  // Custom score field
  const stockBodyTemplate = (rowData) => {
    const stockClassName = classNames(
      "border-circle w-2rem h-2rem inline-flex font-bold justify-content-center align-items-center text-sm",
      {
        "bg-red-100 text-red-900": rowData.score === 0,
        "bg-blue-100 text-blue-900": rowData.score > 0 && rowData.score < 10,
        "bg-teal-100 text-teal-900": rowData.score >= 10,
      }
    );

    return <div className={stockClassName}>{rowData.score}</div>;
  };

  const onGlobalFilterChange = (e) => {
    const value = e.target.value;
    let _filters = { ...filters };
    _filters["global"].value = value;
    setFilters(_filters);
    setGlobalFilterValue(value);
  };

  // Charger le fichier pour l'évaluation à chaud
  const uploadFileHot = async (event) => {
    const file = event.target.files[0];
    if (file) {
      const formData = new FormData();
      formData.append("extraction", file);
      try {
        const response = await api.post(
          `session/${selectedSession.code_session}/load/extraction-hot-form`,
          formData,
          {
            headers: {
              "Content-Type": "multipart/form-data",
            },
          }
        );
        if (response.status === 200) setFileLoad(true);
      } catch (error) {
        console.error("Erreur lors de l'envoi du fichier:", error);
      }
    }
  };

  // Charger le formulaire à chaud après avoir téléversé le fichier
  const _getResponseHotForm = async () => {
    try {
      const response = await api.get(
        `session/${selectedSession.code_session}/hot-eval/responses`
      );
      console.log("form à chaud", response);
      setUserResponse(response.data.data || []);
    } catch (error) {
      console.error("Erreur lors du chargement des collaborateurs:", error);
      setUserResponse([]);
    }
  };

  const saveAsExcelFile = (buffer, fileName) => {
    import("file-saver").then((module) => {
      if (module && module.default) {
        let EXCEL_TYPE =
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8";
        let EXCEL_EXTENSION = ".xlsx";
        const data = new Blob([buffer], {
          type: EXCEL_TYPE,
        });
        module.default.saveAs(
          data,
          fileName + "_export_" + new Date().getTime() + EXCEL_EXTENSION
        );
      }
    });
  };

  const exportExcel = () => {
    import("xlsx").then((xlsx) => {
      const worksheet = xlsx.utils.json_to_sheet(userResponse);
      const workbook = { Sheets: { data: worksheet }, SheetNames: ["data"] };
      const excelBuffer = xlsx.write(workbook, {
        bookType: "xlsx",
        type: "array",
      });
      saveAsExcelFile(excelBuffer, "hot_form_responses");
    });
  };

  const renderHeader = () => {
    return (
      <div className="flex justify-content-between align-items-center">
        <IconField iconPosition="left">
          <InputIcon className="pi pi-search" />
          <InputText
            value={globalFilterValue}
            onChange={onGlobalFilterChange}
            placeholder="Rechercher..."
          />
        </IconField>
        <Button
          type="button"
          icon="pi pi-file-excel"
          severity="success"
          rounded
          onClick={exportExcel}
          data-pr-tooltip="Exporter en Excel"
          className="export-buttons"
        />
      </div>
    );
  };

  useEffect(() => {
    if (fileLoad) _getResponseHotForm();
  }, [fileLoad]);

  return (
    <div>
      <div style={{ marginBottom: "24px" }}>
        <Button
          onClick={() => fileInputRef.current?.click()}
          style={{
            padding: "8px 16px",
            backgroundColor: "#10b981",
            color: "white",
            border: "none",
            borderRadius: "6px",
            fontSize: "12px",
            fontWeight: "500",
            display: "flex",
            alignItems: "center",
            gap: "6px",
          }}
          icon="pi pi-upload"
        >
          Charger la liste
        </Button>
        <input
          ref={fileInputRef}
          type="file"
          accept=".csv,.xlsx,.xls"
          onChange={uploadFileHot}
          style={{ display: "none" }}
        />
      </div>

      <div className="card">
        <Tooltip target=".export-buttons" position="bottom" />
        <DataTable
          scrollable
          scrollHeight="400px"
          header={renderHeader()}
          filters={filters}
          globalFilterFields={['matricule', 'full_name', 'score']}
          value={userResponse}
          paginator
          rows={5}
          rowsPerPageOptions={[5, 10, 25, 50]}
          emptyMessage="Aucune donnée disponible"
        >
          <Column field="matricule" header="Matricule" sortable></Column>
          <Column field="full_name" header="Nom et Prénoms" sortable></Column>
          <Column
            field="score"
            header="Score"
            body={stockBodyTemplate}
            sortable
          ></Column>
        </DataTable>
      </div>
    </div>
  );
}
