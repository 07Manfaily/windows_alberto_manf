// Version Material UI du composant QuizManager

import React, { useState, useEffect } from 'react'; import { Box, Button, Card, CardContent, CircularProgress, Dialog, DialogActions, DialogContent, DialogTitle, Grid, IconButton, InputAdornment, MenuItem, Select, TextField, Typography, Chip } from '@mui/material'; import { Plus, Edit, X, Save, Trash2, Tag } from 'lucide-react';

const mockAPI = { getQuizzes: async () => { await new Promise(resolve => setTimeout(resolve, 500)); return [ { id: 1, quiz: 'Mathématiques niveau 1', type: 'qcm', obligatoire: 'oui', modalites: ['En ligne', 'Temps limité', 'Questions aléatoires'] }, { id: 2, quiz: 'Histoire de France', type: 'qcu', obligatoire: 'non', modalites: ['Présentiel', 'Livre ouvert'] }, { id: 3, quiz: 'Sciences physiques', type: 'qcm', obligatoire: 'oui', modalites: ['Laboratoire', 'Expérimentation pratique', 'Rapport écrit'] } ]; }, createQuiz: async (quizData) => { await new Promise(resolve => setTimeout(resolve, 300)); return { id: Date.now(), ...quizData }; }, updateQuiz: async (id, quizData) => { await new Promise(resolve => setTimeout(resolve, 300)); return { id, ...quizData }; }, deleteQuiz: async (id) => { await new Promise(resolve => setTimeout(resolve, 300)); return { success: true }; } };

const QuizManager = () => { const [quizzes, setQuizzes] = useState([]); const [isModalOpen, setIsModalOpen] = useState(false); const [editingQuiz, setEditingQuiz] = useState(null); const [loading, setLoading] = useState(false); const [formData, setFormData] = useState({ quiz: '', type: 'qcm', obligatoire: 'non', modalites: [] }); const [currentModalite, setCurrentModalite] = useState('');

useEffect(() => { loadQuizzes(); }, []);

const loadQuizzes = async () => { setLoading(true); try { const data = await mockAPI.getQuizzes(); setQuizzes(data); } finally { setLoading(false); } };

const openModal = (quiz = null) => { setEditingQuiz(quiz); setFormData(quiz ? { ...quiz } : { quiz: '', type: 'qcm', obligatoire: 'non', modalites: [] }); setCurrentModalite(''); setIsModalOpen(true); };

const closeModal = () => { setIsModalOpen(false); setEditingQuiz(null); setFormData({ quiz: '', type: 'qcm', obligatoire: 'non', modalites: [] }); setCurrentModalite(''); };

const handleInputChange = (e) => { const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: value })); };

const handleModaliteKeyPress = (e) => { if (e.key === 'Enter' && currentModalite.trim()) { e.preventDefault(); if (!formData.modalites.includes(currentModalite.trim())) { setFormData(prev => ({ ...prev, modalites: [...prev.modalites, currentModalite.trim()] })); } setCurrentModalite(''); } };

const removeModalite = (index) => { setFormData(prev => ({ ...prev, modalites: prev.modalites.filter((_, i) => i !== index) })); };

const handleSubmit = async () => { if (!formData.quiz.trim()) return; try { if (editingQuiz) { const updatedQuiz = await mockAPI.updateQuiz(editingQuiz.id, formData); setQuizzes(prev => prev.map(q => q.id === editingQuiz.id ? updatedQuiz : q)); } else { const newQuiz = await mockAPI.createQuiz(formData); setQuizzes(prev => [...prev, newQuiz]); } closeModal(); } catch (e) { console.error(e); } };

const handleDelete = async (id) => { if (window.confirm('Supprimer ce quiz ?')) { await mockAPI.deleteQuiz(id); setQuizzes(prev => prev.filter(q => q.id !== id)); } };

return ( <Box p={4}> <Box display="flex" justifyContent="space-between" alignItems="center" mb={4}> <Typography variant="h4">Gestionnaire de Quiz</Typography> <Button variant="contained" startIcon={<Plus />} onClick={() => openModal()}> Nouveau Quiz </Button> </Box>

{loading ? (
    <Box textAlign="center" py={4}><CircularProgress /></Box>
  ) : (
    <Grid container spacing={3}>
      {quizzes.map(quiz => (
        <Grid item xs={12} sm={6} md={4} key={quiz.id}>
          <Card onClick={() => openModal(quiz)} sx={{ cursor: 'pointer' }}>
            <CardContent>
              <Box display="flex" justifyContent="space-between">
                <Typography variant="h6">{quiz.quiz}</Typography>
                <Edit size={16} />
              </Box>
              <Typography variant="body2">Type: {quiz.type.toUpperCase()}</Typography>
              <Typography variant="body2">Obligatoire: {quiz.obligatoire === 'oui' ? 'Oui' : 'Non'}</Typography>
              {quiz.modalites && quiz.modalites.map((m, idx) => (
                <Chip key={idx} label={m} icon={<Tag size={12} />} size="small" sx={{ m: 0.5 }} />
              ))}
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  )}

  <Dialog open={isModalOpen} onClose={closeModal} fullWidth maxWidth="sm">
    <DialogTitle>
      {editingQuiz ? 'Modifier le Quiz' : 'Nouveau Quiz'}
      {editingQuiz && (
        <IconButton onClick={() => handleDelete(editingQuiz.id)} color="error" sx={{ ml: 2 }}>
          <Trash2 size={20} />
        </IconButton>
      )}
    </DialogTitle>
    <DialogContent dividers>
      <Box display="flex" flexDirection="column" gap={2}>
        <TextField
          label="Nom du Quiz"
          name="quiz"
          value={formData.quiz}
          onChange={handleInputChange}
          fullWidth
          required
        />
        <Select
          label="Type de Quiz"
          name="type"
          value={formData.type}
          onChange={handleInputChange}
          fullWidth
        >
          <MenuItem value="qcm">QCM</MenuItem>
          <MenuItem value="qcu">QCU</MenuItem>
        </Select>
        <Select
          label="Obligatoire"
          name="obligatoire"
          value={formData.obligatoire}
          onChange={handleInputChange}
          fullWidth
        >
          <MenuItem value="oui">Oui</MenuItem>
          <MenuItem value="non">Non</MenuItem>
        </Select>
        <TextField
          label="Ajouter une modalité"
          value={currentModalite}
          onChange={e => setCurrentModalite(e.target.value)}
          onKeyDown={handleModaliteKeyPress}
          InputProps={{ endAdornment: <InputAdornment position="end">Entrée</InputAdornment> }}
          fullWidth
        />
        <Box display="flex" flexWrap="wrap" gap={1}>
          {formData.modalites.map((m, idx) => (
            <Chip
              key={idx}
              label={m}
              onDelete={() => removeModalite(idx)}
              icon={<Tag size={12} />}
            />
          ))}
        </Box>
      </Box>
    </DialogContent>
    <DialogActions>
      <Button onClick={closeModal}>Annuler</Button>
      <Button variant="contained" onClick={handleSubmit} startIcon={<Save />}>
        {editingQuiz ? 'Modifier' : 'Créer'}
      </Button>
    </DialogActions>
  </Dialog>
</Box>

); };

export default QuizManager;

